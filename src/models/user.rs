/*
 * Clerk Backend API
 *
 * The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
#[serde(default)]
pub struct User {
	#[serde(rename = "id", skip_serializing_if = "Option::is_none")]
	pub id: Option<String>,
	/// String representing the object's type. Objects of the same type share the same value.
	#[serde(rename = "object", skip_serializing_if = "Option::is_none")]
	pub object: Option<Object>,
	#[serde(
		rename = "external_id",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub external_id: Option<Option<String>>,
	#[serde(
		rename = "primary_email_address_id",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub primary_email_address_id: Option<Option<String>>,
	#[serde(
		rename = "primary_phone_number_id",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub primary_phone_number_id: Option<Option<String>>,
	#[serde(
		rename = "primary_web3_wallet_id",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub primary_web3_wallet_id: Option<Option<String>>,
	#[serde(
		rename = "username",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub username: Option<Option<String>>,
	#[serde(
		rename = "first_name",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub first_name: Option<Option<String>>,
	#[serde(
		rename = "last_name",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub last_name: Option<Option<String>>,
	#[serde(rename = "profile_image_url", skip_serializing_if = "Option::is_none")]
	pub profile_image_url: Option<String>,
	#[serde(rename = "image_url", skip_serializing_if = "Option::is_none")]
	pub image_url: Option<String>,
	#[serde(rename = "has_image", skip_serializing_if = "Option::is_none")]
	pub has_image: Option<bool>,
	#[serde(rename = "public_metadata", skip_serializing_if = "Option::is_none")]
	pub public_metadata: Option<serde_json::Value>,
	#[serde(
		rename = "private_metadata",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub private_metadata: Option<Option<serde_json::Value>>,
	#[serde(rename = "unsafe_metadata", skip_serializing_if = "Option::is_none")]
	pub unsafe_metadata: Option<serde_json::Value>,
	#[serde(
		rename = "gender",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub gender: Option<Option<String>>,
	#[serde(
		rename = "birthday",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub birthday: Option<Option<String>>,
	#[serde(rename = "email_addresses", skip_serializing_if = "Option::is_none")]
	pub email_addresses: Option<Vec<crate::models::EmailAddress>>,
	#[serde(rename = "phone_numbers", skip_serializing_if = "Option::is_none")]
	pub phone_numbers: Option<Vec<crate::models::PhoneNumber>>,
	#[serde(rename = "web3_wallets", skip_serializing_if = "Option::is_none")]
	pub web3_wallets: Option<Vec<crate::models::Web3Wallet>>,
	#[serde(rename = "password_enabled", skip_serializing_if = "Option::is_none")]
	pub password_enabled: Option<bool>,
	#[serde(rename = "two_factor_enabled", skip_serializing_if = "Option::is_none")]
	pub two_factor_enabled: Option<bool>,
	#[serde(rename = "totp_enabled", skip_serializing_if = "Option::is_none")]
	pub totp_enabled: Option<bool>,
	#[serde(rename = "backup_code_enabled", skip_serializing_if = "Option::is_none")]
	pub backup_code_enabled: Option<bool>,
	#[serde(rename = "external_accounts", skip_serializing_if = "Option::is_none")]
	pub external_accounts: Option<Vec<crate::models::ExternalAccount>>,
	#[serde(rename = "passkeys", skip_serializing_if = "Option::is_none")]
	pub passkeys: Option<Vec<serde_json::Value>>,
	#[serde(rename = "saml_accounts", skip_serializing_if = "Option::is_none")]
	pub saml_accounts: Option<Vec<crate::models::SamlAccount>>,
	#[serde(rename = "enterprise_accounts", skip_serializing_if = "Option::is_none")]
	pub enterprise_accounts: Option<Vec<crate::models::EnterpriseAccount>>,
	/// Unix timestamp of last sign-in.
	#[serde(
		rename = "last_sign_in_at",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub last_sign_in_at: Option<Option<i64>>,
	/// Flag to denote whether user is banned or not.
	#[serde(rename = "banned", skip_serializing_if = "Option::is_none")]
	pub banned: Option<bool>,
	/// Flag to denote whether user is currently locked, i.e. restricted from signing in or not.
	#[serde(rename = "locked", skip_serializing_if = "Option::is_none")]
	pub locked: Option<bool>,
	/// The number of seconds remaining until the lockout period expires for a locked user. A null value for a locked user indicates that lockout never expires.
	#[serde(
		rename = "lockout_expires_in_seconds",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub lockout_expires_in_seconds: Option<Option<i64>>,
	/// The number of verification attempts remaining until the user is locked. Null if account lockout is not enabled. Note: if a user is locked explicitly via the Backend API, they may still have verification attempts remaining.
	#[serde(
		rename = "verification_attempts_remaining",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub verification_attempts_remaining: Option<Option<i64>>,
	/// Unix timestamp of last update.
	#[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
	pub updated_at: Option<i64>,
	/// Unix timestamp of creation.
	#[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
	pub created_at: Option<i64>,
	/// If enabled, user can delete themselves via FAPI.
	#[serde(rename = "delete_self_enabled", skip_serializing_if = "Option::is_none")]
	pub delete_self_enabled: Option<bool>,
	/// If enabled, user can create organizations via FAPI.
	#[serde(rename = "create_organization_enabled", skip_serializing_if = "Option::is_none")]
	pub create_organization_enabled: Option<bool>,
	/// Unix timestamp of the latest session activity, with day precision.
	#[serde(
		rename = "last_active_at",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub last_active_at: Option<Option<i64>>,
	/// Unix timestamp when MFA was enabled.
	#[serde(
		rename = "mfa_enabled_at",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub mfa_enabled_at: Option<Option<i64>>,
	/// Unix timestamp when MFA was disabled.
	#[serde(
		rename = "mfa_disabled_at",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub mfa_disabled_at: Option<Option<i64>>,
	/// Unix timestamp when legal terms were accepted.
	#[serde(
		rename = "legal_accepted_at",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub legal_accepted_at: Option<Option<i64>>,
}

impl User {
	pub fn new() -> User {
		User {
			id: None,
			object: None,
			external_id: None,
			primary_email_address_id: None,
			primary_phone_number_id: None,
			primary_web3_wallet_id: None,
			username: None,
			first_name: None,
			last_name: None,
			profile_image_url: None,
			image_url: None,
			has_image: None,
			public_metadata: None,
			private_metadata: None,
			unsafe_metadata: None,
			gender: None,
			birthday: None,
			email_addresses: None,
			phone_numbers: None,
			web3_wallets: None,
			password_enabled: None,
			two_factor_enabled: None,
			totp_enabled: None,
			backup_code_enabled: None,
			external_accounts: None,
			passkeys: None,
			saml_accounts: None,
			enterprise_accounts: None,
			last_sign_in_at: None,
			banned: None,
			locked: None,
			lockout_expires_in_seconds: None,
			verification_attempts_remaining: None,
			updated_at: None,
			created_at: None,
			delete_self_enabled: None,
			create_organization_enabled: None,
			last_active_at: None,
			mfa_enabled_at: None,
			mfa_disabled_at: None,
			legal_accepted_at: None,
		}
	}
}

/// String representing the object's type. Objects of the same type share the same value.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
	#[serde(rename = "user")]
	User,
}

impl Default for Object {
	fn default() -> Object {
		Self::User
	}
}

#[cfg(test)]
mod tests {
	use super::*;

	#[test]
	fn test_deserialize_minimal_user() {
		let json = r#"
		{
			"id": "user_123",
			"object": "user",
			"created_at": 1640995200
		}
		"#;

		let user: User = serde_json::from_str(json).expect("Failed to deserialize minimal user");
		assert_eq!(user.id, Some("user_123".to_string()));
		assert_eq!(user.object, Some(Object::User));
		assert_eq!(user.created_at, Some(1640995200));
	}

	#[test]
	fn test_deserialize_user_with_email() {
		let json = r#"
		{
			"id": "user_123",
			"object": "user",
			"first_name": "John",
			"last_name": "Doe",
			"email_addresses": [
				{
					"id": "idn_123",
					"object": "email_address",
					"email_address": "john@example.com",
					"reserved": false,
					"linked_to": [],
					"verification": {
						"status": "verified",
						"strategy": "email_code",
						"attempts": 1,
						"expire_at": 1640995200
					}
				}
			],
			"created_at": 1640995200
		}
		"#;

		let user: User = serde_json::from_str(json).expect("Failed to deserialize user with email");
		assert_eq!(user.id, Some("user_123".to_string()));
		assert_eq!(user.first_name, Some(Some("John".to_string())));
		assert_eq!(user.last_name, Some(Some("Doe".to_string())));
		assert!(user.email_addresses.is_some());
		if let Some(emails) = &user.email_addresses {
			assert_eq!(emails.len(), 1);
			assert_eq!(emails[0].email_address, "john@example.com".to_string());
		}
	}

	#[test] 
	fn test_deserialize_user_with_saml_account() {
		let json = r#"
		{
			"id": "user_123",
			"object": "user",
			"saml_accounts": [
				{
					"id": "samlacc_123",
					"object": "saml_account",
					"provider": "saml_okta",
					"active": true,
					"email_address": "john@company.com",
					"verification": {
						"status": "verified",
						"strategy": "saml",
						"external_verification_redirect_url": null,
						"expire_at": 1640995200
					}
				}
			],
			"created_at": 1640995200
		}
		"#;

		let user: User = serde_json::from_str(json).expect("Failed to deserialize user with SAML account");
		assert_eq!(user.id, Some("user_123".to_string()));
		assert!(user.saml_accounts.is_some());
		if let Some(saml_accounts) = &user.saml_accounts {
			assert_eq!(saml_accounts.len(), 1);
		}
	}

	#[test]
	fn test_deserialize_user_handles_missing_optional_fields() {
		let json = r#"
		{
			"id": "user_123",
			"created_at": 1640995200
		}
		"#;

		let user: User = serde_json::from_str(json).expect("Failed to deserialize user with minimal fields");
		assert_eq!(user.id, Some("user_123".to_string()));
		assert!(user.first_name.is_none());
		assert!(user.last_name.is_none());
		assert!(user.email_addresses.is_none());
	}

	#[test]
	fn test_user_new() {
		let user = User::new();
		assert!(user.id.is_none());
		assert!(user.first_name.is_none());
		assert!(user.email_addresses.is_none());
	}
}
